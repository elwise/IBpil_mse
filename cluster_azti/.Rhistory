ssbs <- cats <- lans <- recs <- array(0, c(7, NF))
ferr <- ssbsa <- catsa <- lansa <- recsa <- array(0, c(NF,
keep, Nmod))
begin <- Nrun - keep + 1
resids = array(stats::rnorm(Nmod * (Nrun + 1), 0, SR$cv),
c(Nmod, Nrun + 1))
if (rhologRec == TRUE) {
fittedlogRec <- do.call(cbind, lapply(c(1:nrow(fit$sr.sto)),
function(i) {
FUN <- match.fun(fit$sr.sto$model[i])
FUN(fit$sr.sto[i, ], fit$rby$ssb)
}))
rhologRec <- apply(log(fit$rby$rec) - fittedlogRec, 2,
function(x) {
stats::cor(x[-length(x)], x[-1])
})
}
if (is.numeric(rhologRec)) {
for (j in 2:(Nrun + 1)) {
resids[, j] <- rhologRec * resids[, j - 1] + resids[,
j] * sqrt(1 - rhologRec^2)
}
}
lims = t(array(SR$cv, c(Nmod, 2))) * recruitment.trim
for (k in 1:Nmod) {
resids[k, resids[k, ] > lims[1, k]] = lims[1, k]
}
for (k in 1:Nmod) {
resids[k, resids[k, ] < lims[2, k]] = lims[2, k]
}
if (verbose)
icesTAF::msg("Running forward simulations.")
if (verbose)
loader(0)
for (i in 1:NF) {
Fbar <- Fscan[i]
Zpre <- Fbar * sel[, rsamsel[1, ]] * Fprop + M[, rsam[1,
]] * Mprop
Zpos <- Fbar * (1 - Fprop) * sel[, rsamsel[1, ]] + M[,
rsam[1, ]] * (1 - Mprop)
Ztot <- Fbar * sel[c(1:ages, rep(ages, 49 - ages)), rsamsel[1,
]] + M[c(1:ages, rep(ages, 49 - ages)), rsam[1, ]]
Zcum <- apply(Ztot, 2, function(x) c(0, cumsum(x)))
N1 <- R * exp(-unname(Zcum))
Ny[, 1, ] <- rbind(N1[1:(ages - 1), ], colSums(N1[ages:50,
]))
ssby[1, ] <- colSums(Mat[, rsam[1, ]] * Ny[, 1, ] * west[,
rsam[1, ]]/exp(Zpre))
for (j in 2:pmax(2, ssb_lag)) {
Ny[, j, ] <- rbind(N1[1:(ages - 1), ], colSums(N1[ages:50,
]))
ssby[j, ] <- colSums(Mat[, rsam[j - 1, ]] * Ny[,
1, ] * west[, rsam[j - 1, ]]/exp(Zpre))
}
for (j in (2 + ssb_lag):Nrun) {
Fnext <- Fbar * pmin(1, ssby[j - 1, ] * exp(SSBerr[j -
1, ])/Btrigger)
Fnext <- exp(Ferr[j, ]) * Fnext
Zpre <- rep(Fnext, each = length(Fprop)) * Fprop *
sel[, rsamsel[j - 1, ]] + M[, rsam[j - 1, ]] *
Mprop
Fy[, j - 1, ] <- rep(Fnext, each = ages) * sel[,
rsamsel[j - 1, ]]
Ny[-1, j, ] <- Ny[1:(ages - 1), j - 1, ] * exp(-Fy[1:(ages -
1), j - 1, ] - M[1:(ages - 1), rsam[j - 1, ]])
Ny[ages, j, ] <- Ny[ages, j, ] + Ny[ages, j - 1,
] * exp(-Fy[ages, j - 1, ] - M[ages, rsam[j -
1, ]])
if (ssb_lag == 0) {
ssby[j, ] <- apply(array(Mat[, rsam[j, ]] * Ny[,
j, ] * west[, rsam[j, ]]/exp(Zpre), c(ages,
Nmod)), 2, sum)
}
SSBforRec <- ssby[j - ssb_lag, ]
if (process.error) {
allrecs <- sapply(unique(SR$mod), function(mod) exp(match.fun(mod)(SR,
SSBforRec) + resids[, j]))
}
else {
allrecs <- sapply(unique(SR$mod), function(mod) exp(match.fun(mod)(SR,
SSBforRec)))
}
select <- cbind(seq(Nmod), as.numeric(factor(SR$mod,
levels = unique(SR$mod))))
Ny[1, j, ] <- allrecs[select]
ssby[j, ] <- apply(array(Mat[, rsam[j, ]] * Ny[,
j, ] * west[, rsam[j, ]]/exp(Zpre), c(ages, Nmod)),
2, sum)
Cy[, j, ] <- Ny[, j - 1, ] * Fy[, j - 1, ]/(Fy[,
j - 1, ] + M[, rsam[j - 1, ]]) * (1 - exp(-Fy[,
j - 1, ] - M[, rsam[j - 1, ]]))
}
Cw <- Cy * Wy
land <- Cy * Ry * Wl
Lan <- apply(land, 2:3, sum)
Cat <- apply(Cw, 2:3, sum)
quants <- c(0.025, 0.05, 0.25, 0.5, 0.75, 0.95, 0.975)
ssbs[, i] <- stats::quantile(ssby[begin:Nrun, ], quants)
cats[, i] <- stats::quantile(Cat[begin:Nrun, ], quants)
lans[, i] <- stats::quantile(Lan[begin:Nrun, ], quants)
recs[, i] <- stats::quantile(Ny[1, begin:Nrun, ], quants)
ferr[i, , ] <- Ferr[begin:Nrun, ]
ssbsa[i, , ] <- ssby[begin:Nrun, ]
catsa[i, , ] <- Cat[begin:Nrun, ]
lansa[i, , ] <- Lan[begin:Nrun, ]
recsa[i, , ] <- Ny[1, begin:Nrun, ]
if (verbose)
loader(i/NF)
}
if (verbose)
icesTAF::msg("Summarising simulations")
dimnames(ssbs) <- dimnames(cats) <- dimnames(lans) <- dimnames(recs) <- list(quants = c("p025",
"p05", "p25", "p50", "p75", "p95",
"p975"), fmort = Fscan)
rbp2dataframe <- function(x, variable) {
x <- data.frame(t(x))
x$variable <- variable
x$Ftarget <- as.numeric(row.names(x))
rownames(x) <- NULL
return(x)
}
rbp <- rbind(rbp2dataframe(recs, "Recruitment"), rbp2dataframe(ssbs,
"Spawning stock biomass"), rbp2dataframe(cats,
"Catch"), rbp2dataframe(lans, "Landings"))
rbp <- rbp[, c(9, 8, 1:7)]
FCrash05 <- Fscan[which.max(cats[2, ]):NF][which(cats[2,
which.max(cats[2, ]):NF] < 0.05 * max(cats[2, ]))[1]]
FCrash50 <- Fscan[which.max(cats[4, ]):NF][which(cats[4,
which.max(cats[4, ]):NF] < 0.05 * max(cats[4, ]))[1]]
if (missing(extreme.trim)) {
catm <- apply(catsa, 1, mean)
lanm <- apply(lansa, 1, mean)
}
else {
catm <- apply(catsa, 1, function(x) {
mean(x[x <= stats::quantile(x, extreme.trim[2]) &
x >= stats::quantile(x, extreme.trim[1])])
})
lanm <- apply(lansa, 1, function(x) {
mean(x[x <= stats::quantile(x, extreme.trim[2]) &
x >= stats::quantile(x, extreme.trim[1])])
})
}
maxcatm <- which.max(catm)
maxlanm <- which.max(lanm)
rbp$Mean <- NA
rbp$Mean[rbp$variable == "Catch"] <- catm
rbp$Mean[rbp$variable == "Landings"] <- lanm
catsam <- apply(catsa, c(1, 3), mean)
lansam <- apply(lansa, c(1, 3), mean)
maxpf <- apply(catsam, 2, which.max)
maxpfl <- apply(lansam, 2, which.max)
FmsyLan <- Fscan[maxpfl]
msymLan <- mean(FmsyLan)
vcumLan <- stats::median(FmsyLan)
fmsy.densLan <- stats::density(FmsyLan)
vmodeLan <- fmsy.densLan$x[which.max(fmsy.densLan$y)]
FmsyCat <- Fscan[maxpf]
msymCat <- mean(FmsyCat)
vcumCat <- stats::median(FmsyCat)
fmsy.densCat <- stats::density(FmsyCat)
vmodeCat <- fmsy.densCat$x[which.max(fmsy.densCat$y)]
pFmsyCat <- data.frame(Ftarget = fmsy.densCat$x, value = cumsum(fmsy.densCat$y *
diff(fmsy.densCat$x)[1]), variable = "pFmsyCatch")
pFmsyLan <- data.frame(Ftarget = fmsy.densLan$x, value = cumsum(fmsy.densLan$y *
diff(fmsy.densLan$x)[1]), variable = "pFmsyLandings")
pProfile <- rbind(pFmsyCat, pFmsyLan)
if (!missing(Blim)) {
pBlim <- apply(ssbsa > Blim, 1, mean)
i <- max(which(pBlim > 0.95))
grad <- diff(Fscan[i + 0:1])/diff(pBlim[i + 0:1])
flim <- Fscan[i] + grad * (0.95 - pBlim[i])
i <- max(which(pBlim > 0.9))
grad <- diff(Fscan[i + 0:1])/diff(pBlim[i + 0:1])
flim10 <- Fscan[i] + grad * (0.9 - pBlim[i])
i <- max(which(pBlim > 0.5))
grad <- diff(Fscan[i + 0:1])/diff(pBlim[i + 0:1])
flim50 <- Fscan[i] + grad * (0.5 - pBlim[i])
pBlim <- data.frame(Ftarget = Fscan, value = 1 - pBlim,
variable = "Blim")
pProfile <- rbind(pProfile, pBlim)
}
else {
flim <- flim10 <- flim50 <- Blim <- NA
}
if (!missing(Bpa)) {
pBpa <- apply(ssbsa > Bpa, 1, mean)
pBpa <- data.frame(Ftarget = Fscan, value = 1 - pBpa,
variable = "Bpa")
pProfile <- rbind(pProfile, pBpa)
}
else {
Bpa <- NA
}
catF <- c(flim, flim10, flim50, vcumCat, Fscan[maxcatm],
FCrash05, FCrash50)
lanF <- c(NA, NA, NA, vcumLan, Fscan[maxlanm], NA, NA)
catC <- stats::approx(Fscan, cats[4, ], xout = catF)$y
lanC <- stats::approx(Fscan, lans[4, ], xout = lanF)$y
catB <- stats::approx(Fscan, ssbs[4, ], xout = catF)$y
lanB <- stats::approx(Fscan, ssbs[4, ], xout = lanF)$y
Refs <- rbind(catF, lanF, catC, lanC, catB, lanB)
rownames(Refs) <- c("catF", "lanF", "catch",
"landings", "catB", "lanB")
colnames(Refs) <- c("F05", "F10", "F50",
"medianMSY", "meanMSY", "FCrash05",
"FCrash50")
auxi <- stats::approx(Fscan, cats[4, ], xout = seq(min(Fscan),
max(Fscan), length = 200))
FmsyMedianC <- auxi$x[which.max(auxi$y)]
MSYMedianC <- max(auxi$y)
FmsylowerMedianC <- auxi$x[min((1:length(auxi$y))[auxi$y/MSYMedianC >=
0.95])]
FmsyupperMedianC <- auxi$x[max((1:length(auxi$y))[auxi$y/MSYMedianC >=
0.95])]
auxi <- stats::approx(Fscan, lans[4, ], xout = seq(min(Fscan),
max(Fscan), length = 200))
FmsyMedianL <- auxi$x[which.max(auxi$y)]
MSYMedianL <- max(auxi$y)
FmsylowerMedianL <- auxi$x[min((1:length(auxi$y))[auxi$y/MSYMedianL >=
0.95])]
FmsyupperMedianL <- auxi$x[max((1:length(auxi$y))[auxi$y/MSYMedianL >=
0.95])]
F5percRiskBlim <- flim
refs_interval <- data.frame(FmsyMedianC = FmsyMedianC, FmsylowerMedianC = FmsylowerMedianC,
FmsyupperMedianC = FmsyupperMedianC, FmsyMedianL = FmsyMedianL,
FmsylowerMedianL = FmsylowerMedianL, FmsyupperMedianL = FmsyupperMedianL,
F5percRiskBlim = F5percRiskBlim, Btrigger = Btrigger)
sim <- list(ibya = list(Mat = Mat, M = M, Fprop = Fprop,
Mprop = Mprop, west = west, weca = weca, sel = sel),
rbya = list(ferr = ferr, ssbsa = ssbsa, catsa = catsa, lansa = lansa, recsa = recsa), rby = fit$rby, rbp = rbp, Blim = Blim,
Bpa = Bpa, Refs = Refs, pProfile = pProfile, id.sim = fit$id.sr,
refs_interval = refs_interval, rhologRec = rhologRec)
if (verbose)
icesTAF::msg("Calculating MSY range values")
sim <- eqsim_range(sim)
return(sim)
}
set.seed(1919)
sim_06_19 <- eqsim_Laura(fSegregShort, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = fSegregShort$sr.det$b , # set BRP?s
Bpa = fSegregShort$sr.det$b * exp(1.645 * sigmaB), # set BRP?s
Nrun = 150)
library(ggplot2)
p1 <- as.ggplot(~barplot(1:10)) +
annotate("text", x = .6, y = .5,
label = "Hello Base Plot", size = 5,
color = 'firebrick', angle=45)
p2 <- as.ggplot(expression(plot(rnorm(10))))
p3 <- as.ggplot(function() plot(sin))
p4 <- as.ggplot(~mosaic(Titanic))
p5 <- as.ggplot(densityplot(~mpg|cyl, data=mtcars))
??as.ggplot
library(ggplotify)
install.packages('ggplotify')
library(ggplotify)
p1 <- as.ggplot(~barplot(1:10)) +
annotate("text", x = .6, y = .5,
label = "Hello Base Plot", size = 5,
color = 'firebrick', angle=45)
p2 <- as.ggplot(expression(plot(rnorm(10))))
p3 <- as.ggplot(function() plot(sin))
p4 <- as.ggplot(~mosaic(Titanic))
p5 <- as.ggplot(densityplot(~mpg|cyl, data=mtcars))
library("vcd")
data(Titanic)
library("lattice")
data(mtcars)
p1 <- as.ggplot(~barplot(1:10)) +
annotate("text", x = .6, y = .5,
label = "Hello Base Plot", size = 5,
color = 'firebrick', angle=45)
p2 <- as.ggplot(expression(plot(rnorm(10))))
p3 <- as.ggplot(function() plot(sin))
p4 <- as.ggplot(~mosaic(Titanic))
p5 <- as.ggplot(densityplot(~mpg|cyl, data=mtcars))
library(cowplot)
library(colorspace)
col <- rainbow_hcl(3)
names(col) <- unique(iris$Species)
color <- col[iris$Species]
p6 <- as.ggplot(~plot(iris$Sepal.Length, iris$Sepal.Width, col=color, pch=15))
p7 <- ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species)) +
geom_point(shape=15) + scale_color_manual(values=col, name="")
legend <- get_legend(p7)
## also able to annotate base or other plots using ggplot2
library(ggimage)
p8 <- p6 + geom_subview(x=.7, y=.78, subview=legend)
p9 <- as.ggplot(~image(volcano))
plot_grid(p1, p2, p3, p4, p5, p6, p7, p8, p9, ncol=3, labels=LETTERS[1:9])
install.packages('ggimage')
library(cowplot)
library(colorspace)
col <- rainbow_hcl(3)
names(col) <- unique(iris$Species)
color <- col[iris$Species]
p6 <- as.ggplot(~plot(iris$Sepal.Length, iris$Sepal.Width, col=color, pch=15))
p7 <- ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species)) +
geom_point(shape=15) + scale_color_manual(values=col, name="")
legend <- get_legend(p7)
## also able to annotate base or other plots using ggplot2
library(ggimage)
p8 <- p6 + geom_subview(x=.7, y=.78, subview=legend)
p9 <- as.ggplot(~image(volcano))
plot_grid(p1, p2, p3, p4, p5, p6, p7, p8, p9, ncol=3, labels=LETTERS[1:9])
p1
p8
p9
pplot_grid(p1, p2, p3, p4, p5, p6, p7, p8, p9, ncol=3, labels=LETTERS[1:9])
plot_grid(p1, p2, p3, p4, p5, p6, p7, p8, p9, ncol=3, labels=LETTERS[1:9])
as.ggplot(~eqsr_plot(fit),text(fit$rby$ssb,fit$rby$rec, labels=fit$rby$year,cex= 0.5,pos=3),
title(sub=paste0(title)))
p1 <- as.ggplot(~eqsr_plot(fSegregShort),text(fit$rby$ssb,fit$rby$rec, labels=fit$rby$year,cex= 0.5,pos=3),
title(sub=paste0(title)))
10*1000
(10*2000)/24
(10*2000)/60
334/24
load("D:/IPMA/SARDINE/sardinha2020/A6/vd_nova.RData")
head(vd_nova)
xx <- subset(vd_nova, EESPECIE=="PIL")
head(xx)
xx <- subset(vd_nova, EESPECIE==100)
head(xx)
library(tidyverse)
xx %>% group_by(ETAMANHO, ANO, IPORTO)%>% fivenum(VVENDA/QVENDA)
xx %>% group_by(ETAMANHO, Ano, IPORTO)%>% fivenum(VVENDA/QVENDA)
xx %>% group_by(ETAMANHO, Ano, IPORTO)%>% fivenum(VVENDA)
xx %>% group_by(ETAMANHO, Ano, IPORTO)%>% summarise(m = mean(VVENDA/QVENDA), sd =sd(VVENDA/QVENDA))
xx %>% group_by(ETAMANHO, IPORTO, Ano)%>% summarise(m = mean(VVENDA/QVENDA), sd =sd(VVENDA/QVENDA))
boxplot(xx$VVENDA/xx$QVENDA)
boxplot(xx$VVENDA/xx$QVENDA~c(Ano,IPO))
boxplot(xx$VVENDA/xx$QVENDA~Ano)
?boxplot
boxplot((VVENDA/QVENDA)~c(Ano,IPORTO), data=xx)
boxplot((VVENDA/QVENDA)~Ano+IPORTO, data=xx)
boxplot((VVENDA/QVENDA)~IPORTO+Ano, data=xx)
ggplot(xx, aes(x=VVENDA/QVENDA, y=Ano))+ geom_boxplot() + facet_grid(~IPORTO)
ggplot(xx, aes(x=VVENDA/QVENDA))+ geom_boxplot() + facet_grid(Ano~IPORTO)
ggplot(xx, aes(x=VVENDA/QVENDA))+ geom_boxplot() + facet_grid(IPORTO)
ggplot(xx, aes(x=VVENDA/QVENDA))+ geom_boxplot() + facet_grid(~IPORTO)
ggplot(xx, aes(x=VVENDA/QVENDA),y=Ano)+ geom_boxplot() + facet_grid(~IPORTO)
ggplot(xx, aes(y=VVENDA/QVENDA),x=Ano)+ geom_boxplot() + facet_grid(~IPORTO)
ggplot(xx, aes(y=VVENDA/QVENDA),x=ETAMANHO)+ geom_boxplot() + facet_grid(~IPORTO)
ggplot(xx, aes(y=VVENDA/QVENDA),x=as.factor(ETAMANHO))+ geom_boxplot() + facet_grid(~IPORTO)
ggplot(xx, aes(y=VVENDA/QVENDA),x=as.factor(ETAMANHO))+ geom_boxplot() + facet_grid(Ano~IPORTO)
ggplot(subset(xx, PORTO_NOME=="Peniche"), aes(y=VVENDA/QVENDA),x=as.factor(ETAMANHO))+ geom_boxplot() + facet_grid(Ano~IPORTO)
ggplot(subset(xx, PORTO_NOME=="Peniche"), aes(y=(VVENDA/QVENDA),x=as.factor(ETAMANHO))+ geom_boxplot() + facet_grid(Ano~IPORTO)
))
ggplot(subset(xx, PORTO_NOME=="Peniche"), aes(y=(VVENDA/QVENDA),x=as.factor(ETAMANHO))+ geom_boxplot() + facet_grid(Ano~IPORTO)
)
)
subset(xx, PORTO_NOME=="Peniche")
ggplot(subset(xx, PORTO_NOME=="Peniche"), aes(y=(VVENDA/QVENDA),x=as.factor(ETAMANHO)))+ geom_boxplot() + facet_grid(Ano~IPORTO)
39*77
0.66*900
950*0.66
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
options(knitr.graphics.auto_pdf = TRUE)
#LOAD LIBRARIES
library(tidyverse)
library(quantreg)
library(purrr)
library(scales)
library(FLCore)
library(lubridate)
load("D:/IPMA/SARDINE/ADVICE_MP/FLBEIA_mseIBpil/2020/cluster_azti/data2020/ASSss3_2020Data.RData")
srLowUpper <- all %>%
pivot_wider(.,names_from="indicator", values_from=c("q50","q05","q95")) %>%
filter(year>1992)
ggplot(data= srLowUpper,aes(x = q50_ssb, y = q50_rec)) +
geom_point() +
geom_errorbar(aes(ymin = q05_rec, ymax = q95_rec),color="grey50") +
geom_errorbarh(aes(xmin = q05_ssb, xmax = q95_ssb),color="grey50") +
geom_point(data=subset(srLowUpper,year %in% c(2006:2019)),color="red") +
geom_text(aes(label=year),hjust=0, vjust=0,size=3)+
labs(x="Biomass 1+",y="Recruitment")
#other way is to 'simulate' the function we use for recruitment
load("D:/IPMA/SARDINE/ADVICE_MP/FLBEIA_mseIBpil/2020/cluster_azti/data2020/pil.stock2020.RData")
pil.stock <- pil
rm(pil)
ass.yr <- 2020
#change stock.n at age zero/rec in year 2020 to the geometric mean of the last five years as in the stock annex
stock.n(pil.stock)[1,ac(ass.yr)] <- exp(mean(log(rec(pil.stock)[,ac((ass.yr-5):(ass.yr-1))])))
# Stock - recruitment (for age-structured stocks) ----
# Segmented regression (inflexion point at Blim from WKSARMP 2019)
SR <- as.FLSR(pil.stock)
newssb <- FLQuant(seq(0, max(SR@ssb), length.out=20000))
model(SR) <- segreg()
#params for sr low regime with 2019 data point
yrs.srlow <- 2006:2019
params_low <- fmle(window(SR, start=2006, end=2019), fixed=list(b=196334))@params
pilsr <- fmle(SR, fixed=list(a=c(params_low)[1],b=196334))
segrec <- predict(pilsr, ssb = newssb)
residsd_low <- sqrt(var(log(exp(residuals(pilsr)[,ac(yrs.srlow)])),na.rm=T))
res <- exp(rnorm(20000, 0, residsd_low))
#params for sr low regime without the 2019 data point
yrs.srlow2 <- 2006:2018
params_low2 <- fmle(window(SR, start=2006, end=2018), fixed=list(b=196334))@params
pilsr2 <- fmle(SR, fixed=list(a=c(params_low2)[1],b=196334))
segrec2 <- predict(pilsr2, ssb = newssb)
residsd_low2 <- sqrt(var(log(exp(residuals(pilsr2)[,ac(yrs.srlow2)])),na.rm=T))
res2 <- exp(rnorm(20000, 0, residsd_low2))
plot(pilsr[,ac(2006:2019)])
plot(pilsr2[,ac(2006:2018)])
fit_qr <- function(x, q) {
quantreg::nlrq(y ~ SSlogis(x, Asym, mid, scal), tau = q, data = x)
}
d.qregs <-
rbind(
data.frame(x = as.numeric(newssb), y = as.numeric(segrec) * res, Set = "segrec"),
data.frame(x = as.numeric(newssb), y = as.numeric(segrec2) * res2, Set = "segrec2")
) %>%
group_by(Set) %>%
nest() %>%
transmute(q05 = map(data, fit_qr, q = 0.05),
q50 = map(data, fit_qr, q = 0.5),
q95 = map(data, fit_qr, q = 0.95),
x = map(data, ~ data.frame(x = seq(min(.x$x), max(.x$x), length.out = 1000)))) %>%
pivot_longer(names_to = "Quantile", values_to = "model", c(q05, q50, q95)) %>%
mutate(pred = map2(model, x, predict.nlrq)) %>%
select(-model) %>%
unnest(cols = c(x, Quantile, pred))
ggplot(d.qregs, aes(x = x, y = pred, colour = Set)) +
#geom_point(aes(y = y), alpha = 0.02) +
geom_line(aes(linetype = Quantile)) +
geom_text(data = ~ top_n(.x, n = 1, wt = x),
aes(label = scales::label_scientific()(pred)),
hjust = 1, vjust = -0.25, show.legend = FALSE) +
scale_colour_viridis_d(begin = 0.3, end = 0.8) +
labs(x = "SSB", y = "Rec") +
theme_minimal()
print(sessionInfo(),locale=FALSE)
#other way is to 'simulate' the function we use for recruitment
load("D:/IPMA/SARDINE/ADVICE_MP/FLBEIA_mseIBpil/2020/cluster_azti/data2020/pil.stock2020.RData")
pil.stock <- pil
rm(pil)
ass.yr <- 2020
#change stock.n at age zero/rec in year 2020 to the geometric mean of the last five years as in the stock annex
stock.n(pil.stock)[1,ac(ass.yr)] <- exp(mean(log(rec(pil.stock)[,ac((ass.yr-5):(ass.yr-1))])))
# Stock - recruitment (for age-structured stocks) ----
# Segmented regression (inflexion point at Blim from WKSARMP 2019)
SR <- as.FLSR(pil.stock)
newssb <- FLQuant(seq(0, max(SR@ssb), length.out=20000))
model(SR) <- segreg()
#params for sr low regime with 2019 data point
yrs.srlow <- 2006:2019
params_low <- fmle(window(SR, start=2006, end=2019), fixed=list(b=196334))@params
pilsr <- fmle(SR, fixed=list(a=c(params_low)[1],b=196334))
segrec <- predict(pilsr, ssb = newssb)
residsd_low <- sqrt(var(log(exp(residuals(pilsr)[,ac(yrs.srlow)])),na.rm=T))
res <- exp(rnorm(20000, 0, residsd_low))
#params for sr low regime without the 2019 data point
yrs.srlow2 <- 2006:2018
params_low2 <- fmle(window(SR, start=2006, end=2018), fixed=list(b=196334))@params
pilsr2 <- fmle(SR, fixed=list(a=c(params_low2)[1],b=196334))
segrec2 <- predict(pilsr2, ssb = newssb)
residsd_low2 <- sqrt(var(log(exp(residuals(pilsr2)[,ac(yrs.srlow2)])),na.rm=T))
res2 <- exp(rnorm(20000, 0, residsd_low2))
#other way is to 'simulate' the function we use for recruitment
load("D:/IPMA/SARDINE/ADVICE_MP/FLBEIA_mseIBpil/2020/cluster_azti/data2020/pil.stock2020.RData")
pil.stock <- pil
rm(pil)
ass.yr <- 2020
#change stock.n at age zero/rec in year 2020 to the geometric mean of the last five years as in the stock annex
stock.n(pil.stock)[1,ac(ass.yr)] <- exp(mean(log(rec(pil.stock)[,ac((ass.yr-5):(ass.yr-1))])))
# Stock - recruitment (for age-structured stocks) ----
# Segmented regression (inflexion point at Blim from WKSARMP 2019)
SR <- as.FLSR(pil.stock)
newssb <- FLQuant(seq(0, max(SR@ssb), length.out=20000))
model(SR) <- segreg()
#params for sr low regime with 2019 data point
yrs.srlow <- 2006:2019
params_low <- fmle(window(SR, start=2006, end=2019), fixed=list(b=196334))@params
pilsr <- fmle(SR, fixed=list(a=c(params_low)[1],b=196334))
segrec <- predict(pilsr, ssb = newssb)
residsd_low <- sqrt(var(log(exp(residuals(pilsr)[,ac(yrs.srlow)])),na.rm=T))
res <- exp(rnorm(20000, 0, residsd_low))
#params for sr low regime without the 2019 data point
yrs.srlow2 <- 2006:2018
params_low2 <- fmle(window(SR, start=2006, end=2018), fixed=list(b=196334))@params
pilsr2 <- fmle(SR, fixed=list(a=c(params_low2)[1],b=196334))
segrec2 <- predict(pilsr2, ssb = newssb)
residsd_low2 <- sqrt(var(log(exp(residuals(pilsr2)[,ac(yrs.srlow2)])),na.rm=T))
res2 <- exp(rnorm(20000, 0, residsd_low2))
mean(rec(pil.stock)[,ac(1993:2019)])
mean(rec(pil.stock)[,ac(2006:2019)])
mean(rec(pil.stock)[,ac(2006:2018)])
load("D:/IPMA/SARDINE/CAS/2020/regimeProductividade/BRP_2020.Rdata.RData")
wd <- "D:/IPMA/SARDINE/ADVICE_MP/FLBEIA_mseIBpil/2020/cluster_azti/"
setwd(wd)
# directory with results
res.dir  <- file.path("./output_refpts")
res.plots  <- file.path("./output_refpts/plots")
dfyr <- read.table(file.path(res.dir,"stats_byyr.csv"), header=T, sep=";")
#select only variables of interest
dfyr <- dfyr[,c(1:9,10,20,30,11,21,31,12,22,32,14,24,34)]
#change units of variables of interest
dfyr[,c(10:12)] <- dfyr[,c(10:12)]/1000000
dfyr[,c(13:15)] <- dfyr[,c(13:15)]/1000
dfyr[,c(19:21)] <- dfyr[,c(19:21)]/1000
dfyr
#get data from historical assessment
load("D:/IPMA/SARDINE/ADVICE_MP/FLBEIA_mseIBpil/2020/cluster_azti/data2020/ASSss3_2020Data.RData")
head(all)
load("D:/IPMA/SARDINE/ADVICE_MP/FLBEIA_mseIBpil/2020/cluster_azti/data2020/pil.stock2020.RData")
rec(pil)
